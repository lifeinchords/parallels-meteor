$map-height: 5000px;
$map-width: 5000px;

.scroll--vertical-only {
  overflow-y: scroll !important;
  overflow-x: hidden !important;
}

.map {	  
	// required to get dble click/ bit:new text to show
	min-height: $map-height;
	min-width: $map-width;
	
	height: 100%;
  width: 100%;
}

.map__lightbox {
  min-height: initial;
  min-width: initial;
}

.mode--create-parallel {
  background: #7B7B7B;
}

.progress {
  top: 25%;
  left: 50%;
  position: absolute;
}

.progress h3 {
  margin: auto;
  vertical-align: middle;
}

#corner-sparks--particles {  
  position: absolute;
  height: $map-height;
  width: $map-width;
}


.create-parallel--line {    
  position: absolute;
  svg { 
    // override insertion of position:fixed by two.js 'fullscreen' param
    position: absolute !important; 
  }
}


// inspired by          : https://www.youtube.com/watch?v=wHaZrYX0kAU&t=14m54s
// adapated from        : http://codepen.io/vdaguenet/pen/Ebycz

$line-size: 1px;
$color-init: #F9D423;
$color-first: #FE4365;
$color-second: #C7F464;

.wipe {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;

  .line {
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: 1;
    transform-origin: left top;
   }

  .mask {
    position: absolute;
    z-index: 2;
  }
}

// TODO: refactor to BEM formatting
.wipe.top-to-bottom .line { background: $color-first; }
.wipe.side-to-side .line  { background: $color-second; }

.wipe.load.top-to-bottom .mask {
  width: 100%;
  height: calc(50% - #{$line-size});
  background: $color-init;
  
  &.top     { top: 0; }
  &.bottom  { bottom: 0; }
}

.wipe.side-to-side .mask {
  height: 100%;
  
  &.right { right: 0; }
  &.left  { left: 0; }
}

.wipe.load.side-to-side .mask {
  width: calc(50% - #{$line-size});
  background: $color-first;
}

.wipe.bit-preview {
  display: none;
  opacity: 0;
  z-index: 100; // TODO: write function to find highest z-index of any bit existing on canvas
}

.wipe.bit-preview .mask {
  background: #222;
  width: 100%;
  height: 100%;
}

///////////////////


.marquee-select {
  position: absolute !important;
  display: none;
  z-index: 9000;
  cursor: default !important;
}


.marquee-active {
  display: block !important;
}

.marquee-select > span {
  background-color: rgba(239, 28, 190, 0.6);
  border: 1px solid #b20e8c;
  width: 100%;
  height: 100%;
  float: left;
}



/////////////////////////

$face-height: 60px;
$half-height: $face-height / 2;

.selected-count {
  position: fixed;
  display: inline-block;
  bottom: 0;
  color: #676773;
  padding: 1rem;
  border-top: 1px solid #b4b4b4
}

// adapted from https://davidwalsh.name/css-cube
// https://www.smashingmagazine.com/2016/07/front-end-challenge-accepted-css-3d-cube/
.cube-wrap {
  position: fixed;
  bottom: 0;
  perspective: 800px;
  webkit-perspective: 800px;
  perspective-origin: 50% $half-height;
  -webkit-perspective-origin: 50%;
}

.cube {
  position: relative;
  min-width: $face-height;
  height: $face-height;
  margin: 0 auto; /* keeps the cube centered */
  transform-style: preserve-3d;
  transform-origin: 0 $half-height;
  transform: rotateX(0deg);

  // TODO: transitioning opacity doesn't seem to work together with transform.
  // known bug: https://stackoverflow.com/questions/23369440/google-chrome-is-unable-to-apply-opacity-transition-on-a-3d-transformed-element
  // but even opacity: 0.1 doesn't seem to work 
  transition: transform 0.2s cubic-bezier(.42,1.82,.91,.91);
}

.cube--show {
  transform: rotateX(-90deg);
}

.cube div {
  position: absolute;
  min-width: $face-height;
  height: $face-height;
  font-size: 20px;
  text-align: center;
  line-height: $face-height;
  width: 123px;
  padding: 0 1.7rem;
}

.back-pane {
  transform: translateZ(-$half-height) rotateY(180deg);
  // background-color: yellow;
}

.right-pane {
  transform: rotateY(-270deg) translateX($half-height);
  transform-origin: top right;
  // background-color: green;

}

.left-pane {
  transform: rotateY(270deg) translateX(-$half-height);
  transform-origin: center left;
  // background-color: green;
}

.top-pane {
  transform: rotateX(-270deg) translateY(-$half-height);
  transform-origin: top center;
  background-color: white;
}

.bottom-pane {
  transform: rotateX(-90deg) translateY($half-height);
  transform-origin: bottom center;
  // background-color: purple;
}

.front-pane {
  transform: translateZ($half-height);
  background-color: #e7e4e4;
}

.top-panel h1 { display: inline-block; font-weight:bold; margin-right: 0.25rem;  }


/////////


.outline__container {
  position: fixed;
  overflow: hidden;
  z-index: 1000; // TODO: use z-index util to calc highest *used z-index instead of hardcoding.
  width: 200px;
  height: 200px;
  bottom: 0;
  right: 0;
  margin: 1rem;
}

.outline__svg {
  position: absolute;
  width: 100%; 
  height: 100%; 
}
